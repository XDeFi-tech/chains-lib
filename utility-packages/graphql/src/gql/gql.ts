/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
  'query GetBinanceBalances($address: String!) {\n  binance {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        symbol\n        price {\n          amount\n          scalingFactor\n          dayPriceChange\n        }\n      }\n    }\n  }\n}\n\nquery GetBinanceTransactions($address: String!, $first: Int, $after: String, $blockRange: OptBlockSelector) {\n  binance {\n    transactions(\n      address: $address\n      first: $first\n      after: $after\n      blockRange: $blockRange\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          amount {\n            value\n          }\n          asset {\n            chain\n            contract\n            decimals\n            id\n            image\n            name\n            price {\n              amount\n              scalingFactor\n            }\n            symbol\n            type\n          }\n          blockHeight\n          data\n          fee {\n            value\n          }\n          fromAddress\n          hash\n          status\n          time\n          toAddress\n          type\n        }\n      }\n    }\n  }\n}\n\nquery GetBinanceFee {\n  binance {\n    fee\n  }\n}\n\nquery GetBinanceStatus {\n  binance {\n    status {\n      lastBlock {\n        hash\n        height\n        time\n        txCount\n      }\n    }\n  }\n}':
    types.GetBinanceBalancesDocument,
  'query BitcoinBalance($address: String!) {\n  bitcoin {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          dayPriceChange\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetBitcoinFees {\n  bitcoin {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetBitcoinTransactions($address: String!, $pageSize: Int!, $pageNumber: Int!) {\n  bitcoin {\n    transactionsV2(address: $address, pageSize: $pageSize, pageNumber: $pageNumber) {\n      balanceChange {\n        value\n      }\n      blockNumber\n      fee {\n        value\n      }\n      hash\n      inputs {\n        address\n        amount {\n          value\n        }\n      }\n      outputs {\n        amount {\n          value\n        }\n        address\n      }\n      timestamp\n      status\n    }\n  }\n}\n\nquery BitcoinBroadcastTransaction($rawHex: String!) {\n  bitcoin {\n    broadcastTransaction(rawHex: $rawHex)\n  }\n}\n\nquery BitcoinScanUTXOs($address: String!, $page: Int!) {\n  bitcoin {\n    unspentTxOutputsV5(address: $address, page: $page) {\n      oTxHash\n      oIndex\n      value {\n        value\n      }\n      oTxHex\n      address\n      isCoinbase\n      scriptHex\n    }\n  }\n}\n\nquery BitcoinGetTransactionByHash($txHash: String!) {\n  bitcoin {\n    getTransactionByHashV5(txHash: $txHash) {\n      hex\n      txid\n      hash\n      size\n      version\n      locktime\n      confirmations\n      blocktime\n      time\n      blockhash\n      blockNumber\n      sourceOfData\n      inputs {\n        address\n      }\n      outputs {\n        address\n      }\n    }\n  }\n}':
    types.BitcoinBalanceDocument,
  'query BitcoinCashBalance($address: String!) {\n  bitcoincash {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          dayPriceChange\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetBitcoinCashFees {\n  bitcoincash {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetBitcoinCashTransactions($address: String!, $pageSize: Int!, $pageNumber: Int!) {\n  bitcoincash {\n    transactionsV2(address: $address, pageSize: $pageSize, pageNumber: $pageNumber) {\n      balanceChange {\n        value\n      }\n      blockNumber\n      fee {\n        value\n      }\n      hash\n      inputs {\n        address\n        amount {\n          value\n        }\n      }\n      outputs {\n        amount {\n          value\n        }\n        address\n      }\n      timestamp\n      status\n    }\n  }\n}\n\nquery BitcoinCashBroadcastTransaction($rawHex: String!) {\n  bitcoincash {\n    broadcastTransaction(rawHex: $rawHex)\n  }\n}\n\nquery BitcoinCashScanUTXOs($address: String!, $page: Int!) {\n  bitcoincash {\n    unspentTxOutputsV5(address: $address, page: $page) {\n      oTxHash\n      oIndex\n      value {\n        value\n      }\n      oTxHex\n      address\n      isCoinbase\n      scriptHex\n    }\n  }\n}\n\nquery BitcoinCashGetTransactionByHash($txHash: String!) {\n  bitcoincash {\n    getTransactionByHashV5(txHash: $txHash) {\n      hex\n      txid\n      hash\n      size\n      version\n      locktime\n      confirmations\n      blocktime\n      time\n      blockhash\n      blockNumber\n      sourceOfData\n      inputs {\n        address\n      }\n      outputs {\n        address\n      }\n    }\n  }\n}':
    types.BitcoinCashBalanceDocument,
  'query GetAssetsWithFilter($page: ConnectionArgs!, $filter: TokenFilter) {\n  assets {\n    tokens(page: $page, filter: $filter) {\n      page {\n        edges {\n          node {\n            contracts {\n              address\n              symbol\n              chain\n              scalingFactor\n            }\n            id\n            price {\n              amount\n              scalingFactor\n            }\n            symbol\n            name\n            icon\n          }\n        }\n      }\n    }\n  }\n}':
    types.GetAssetsWithFilterDocument,
  'query CosmosBalance($address: String!) {\n  cosmos {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n          dayPriceChange\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetCosmosTransactions($address: String!, $blockRange: OptBlockRange!, $first: Int!, $after: String) {\n  cosmos {\n    transactions(\n      address: $address\n      blockRange: $blockRange\n      first: $first\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetCosmosFees {\n  cosmos {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetCosmosStatus {\n  cosmos {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery OsmosisBalance($address: String!) {\n  osmosis {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n          dayPriceChange\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetOsmosisTransactions($address: String!, $blockRange: OptBlockRange!, $first: Int!, $after: String) {\n  osmosis {\n    transactions(\n      address: $address\n      blockRange: $blockRange\n      first: $first\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetOsmosisFees {\n  osmosis {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetOsmosisStatus {\n  osmosis {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery AxelarBalance($address: String!) {\n  axelar {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n          dayPriceChange\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetAxelarTransactions($address: String!, $blockRange: OptBlockRange!, $first: Int!, $after: String) {\n  axelar {\n    transactions(\n      address: $address\n      blockRange: $blockRange\n      first: $first\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetAxelarFees {\n  axelar {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetAxelarStatus {\n  axelar {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery CrescentBalance($address: String!) {\n  crescent {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n          dayPriceChange\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetCrescentTransactions($address: String!, $blockRange: OptBlockRange!, $first: Int!, $after: String) {\n  crescent {\n    transactions(\n      address: $address\n      blockRange: $blockRange\n      first: $first\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetCrescentFees {\n  crescent {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetCrescentStatus {\n  crescent {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery KavaBalance($address: String!) {\n  kava {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n          dayPriceChange\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetKavaTransactions($address: String!, $blockRange: OptBlockRange!, $first: Int!, $after: String) {\n  kava {\n    transactions(\n      address: $address\n      blockRange: $blockRange\n      first: $first\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetKavaFees {\n  kava {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetKavaStatus {\n  kava {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery AkashBalance($address: String!) {\n  akash {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n          dayPriceChange\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetAkashTransactions($address: String!, $blockRange: OptBlockRange!, $first: Int!, $after: String) {\n  akash {\n    transactions(\n      address: $address\n      blockRange: $blockRange\n      first: $first\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetAkashFees {\n  akash {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetAkashStatus {\n  akash {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery CronosBalance($address: String!) {\n  cronos {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n          dayPriceChange\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetCronosTransactions($address: String!, $blockRange: OptBlockRange!, $first: Int!, $after: String) {\n  cronos {\n    transactions(\n      address: $address\n      blockRange: $blockRange\n      first: $first\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetCronosFees {\n  cronos {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetCronosStatus {\n  cronos {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery KujiraBalance($address: String!) {\n  kujira {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n          dayPriceChange\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetKujiraTransactions($address: String!, $blockRange: OptBlockRange!, $first: Int!, $after: String) {\n  kujira {\n    transactions(\n      address: $address\n      blockRange: $blockRange\n      first: $first\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetKujiraFees {\n  kujira {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetKujiraStatus {\n  kujira {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery StrideBalance($address: String!) {\n  stride {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n          dayPriceChange\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetStrideTransactions($address: String!, $blockRange: OptBlockRange!, $first: Int!, $after: String) {\n  stride {\n    transactions(\n      address: $address\n      blockRange: $blockRange\n      first: $first\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetStrideFees {\n  stride {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetStrideStatus {\n  stride {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery MarsBalance($address: String!) {\n  mars {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n          dayPriceChange\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetMarsTransactions($address: String!, $blockRange: OptBlockRange!, $first: Int!, $after: String) {\n  mars {\n    transactions(\n      address: $address\n      blockRange: $blockRange\n      first: $first\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetMarsFees {\n  mars {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetMarsStatus {\n  mars {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery JunoBalance($address: String!) {\n  juno {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n          dayPriceChange\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetJunoTransactions($address: String!, $blockRange: OptBlockRange!, $first: Int!, $after: String) {\n  juno {\n    transactions(\n      address: $address\n      blockRange: $blockRange\n      first: $first\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetJunoFees {\n  juno {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetJunoStatus {\n  juno {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery StargazeBalance($address: String!) {\n  stargaze {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n          dayPriceChange\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetStargazeTransactions($address: String!, $blockRange: OptBlockRange!, $first: Int!, $after: String) {\n  stargaze {\n    transactions(\n      address: $address\n      blockRange: $blockRange\n      first: $first\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetStargazeFees {\n  stargaze {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetStargazeStatus {\n  stargaze {\n    status {\n      lastBlock\n    }\n  }\n}':
    types.CosmosBalanceDocument,
  'query TerraBalance($address: String!) {\n  terra {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n          dayPriceChange\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetTerraFees {\n  terra {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetTerraStatus {\n  terra {\n    status {\n      lastBlock\n    }\n  }\n}':
    types.TerraBalanceDocument,
  'query DogecoinBalance($address: String!) {\n  dogecoin {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          dayPriceChange\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetDogecoinFees {\n  dogecoin {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetDogecoinTransactions($address: String!, $pageSize: Int!, $pageNumber: Int!) {\n  dogecoin {\n    transactionsV2(address: $address, pageSize: $pageSize, pageNumber: $pageNumber) {\n      balanceChange {\n        value\n      }\n      blockNumber\n      fee {\n        value\n      }\n      hash\n      inputs {\n        address\n        amount {\n          value\n        }\n      }\n      outputs {\n        amount {\n          value\n        }\n        address\n      }\n      timestamp\n      status\n    }\n  }\n}\n\nquery DogecoinBroadcastTransaction($rawHex: String!) {\n  dogecoin {\n    broadcastTransaction(rawHex: $rawHex)\n  }\n}\n\nquery DogecoinScanUTXOs($address: String!, $page: Int!) {\n  dogecoin {\n    unspentTxOutputsV5(address: $address, page: $page) {\n      oTxHash\n      oIndex\n      value {\n        value\n      }\n      oTxHex\n      address\n      isCoinbase\n      scriptHex\n    }\n  }\n}\n\nquery DogecoinGetTransactionByHash($txHash: String!) {\n  dogecoin {\n    getTransactionByHashV5(txHash: $txHash) {\n      hex\n      txid\n      hash\n      size\n      version\n      locktime\n      confirmations\n      blocktime\n      time\n      blockhash\n      blockNumber\n      sourceOfData\n      inputs {\n        address\n      }\n      outputs {\n        address\n      }\n    }\n  }\n}':
    types.DogecoinBalanceDocument,
  'query GetArbitrumBalance($address: String!) {\n  arbitrum {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n      }\n    }\n  }\n}\n\nquery ArbitrumDefaultGasFees {\n  arbitrum {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetArbitrumTransactions($address: String!, $first: Int) {\n  arbitrum {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetArbitrumStatus {\n  arbitrum {\n    status {\n      lastBlock\n    }\n  }\n}':
    types.GetArbitrumBalanceDocument,
  'query GetAuroraBalance($address: String!) {\n  aurora {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n      }\n    }\n  }\n}\n\nquery AuroraDefaultGasFees {\n  aurora {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetAuroraTransactions($address: String!, $first: Int) {\n  aurora {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetAuroraStatus {\n  aurora {\n    status {\n      lastBlock\n    }\n  }\n}':
    types.GetAuroraBalanceDocument,
  'query GetAvalancheBalance($address: String!) {\n  avalanche {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n      }\n    }\n  }\n}\n\nquery AvalancheEIP1559GasFees {\n  avalanche {\n    fee {\n      high {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      low {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      medium {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n    }\n  }\n}\n\nquery GetAvalancheTransactions($address: String!, $first: Int) {\n  avalanche {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetAvalancheStatus {\n  avalanche {\n    status {\n      lastBlock\n    }\n  }\n}':
    types.GetAvalancheBalanceDocument,
  'query GetCantoEVMBalance($address: String!) {\n  cantoEVM {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n      }\n    }\n  }\n}\n\nquery CantoEVMEIP1559GasFees {\n  cantoEVM {\n    fee {\n      high {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      low {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      medium {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n    }\n  }\n}\n\nquery GetCantoEVMTransactions($address: String!, $first: Int) {\n  cantoEVM {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetCantoEVMStatus {\n  cantoEVM {\n    status {\n      lastBlock\n    }\n  }\n}':
    types.GetCantoEvmBalanceDocument,
  'query GetCronosEVMBalance($address: String!) {\n  cronosEVM {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n      }\n    }\n  }\n}\n\nquery CronosEVMEIP1559GasFees {\n  cronosEVM {\n    fee {\n      high {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      low {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      medium {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n    }\n  }\n}\n\nquery GetCronosEVMTransactions($address: String!, $first: Int) {\n  cronosEVM {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetCronosEVMStatus {\n  cronosEVM {\n    status {\n      lastBlock\n    }\n  }\n}':
    types.GetCronosEvmBalanceDocument,
  'query GetEthereumBalance($address: String!) {\n  ethereum {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n      }\n    }\n  }\n}\n\nquery EthereumEIP1559GasFees {\n  ethereum {\n    fee {\n      high {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      low {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      medium {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n    }\n  }\n}\n\nquery GetEthereumTransactions($address: String!, $first: Int) {\n  ethereum {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetEthereumStatus {\n  ethereum {\n    status {\n      lastBlock\n    }\n  }\n}':
    types.GetEthereumBalanceDocument,
  'query GetFantomBalance($address: String!) {\n  fantom {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n      }\n    }\n  }\n}\n\nquery FantomEIP1559GasFees {\n  fantom {\n    fee {\n      high {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      low {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      medium {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n    }\n  }\n}\n\nquery GetFantomTransactions($address: String!, $first: Int) {\n  fantom {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetFantomStatus {\n  fantom {\n    status {\n      lastBlock\n    }\n  }\n}':
    types.GetFantomBalanceDocument,
  'query GetOptimismBalance($address: String!) {\n  optimism {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n      }\n    }\n  }\n}\n\nquery OptimismEIP1559GasFees {\n  optimism {\n    fee {\n      high {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      low {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      medium {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n    }\n  }\n}\n\nquery GetOptimismTransactions($address: String!, $first: Int) {\n  optimism {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetOptimismStatus {\n  optimism {\n    status {\n      lastBlock\n    }\n  }\n}':
    types.GetOptimismBalanceDocument,
  'query GetPolygonBalance($address: String!) {\n  polygon {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n      }\n    }\n  }\n}\n\nquery PolygonEIP1559GasFees {\n  polygon {\n    fee {\n      high {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      low {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      medium {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n    }\n  }\n}\n\nquery GetPolygonTransactions($address: String!, $first: Int) {\n  polygon {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetPolygonStatus {\n  polygon {\n    status {\n      lastBlock\n    }\n  }\n}':
    types.GetPolygonBalanceDocument,
  'query GetSmartChainBalance($address: String!) {\n  binanceSmartChain {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n      }\n    }\n  }\n}\n\nquery SmartChainDefaultGasFees {\n  binanceSmartChain {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetSmartChainTransactions($address: String!, $first: Int) {\n  binanceSmartChain {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetSmartChainStatus {\n  binanceSmartChain {\n    status {\n      lastBlock\n    }\n  }\n}':
    types.GetSmartChainBalanceDocument,
  'query LitecoinBalance($address: String!) {\n  litecoin {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          dayPriceChange\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetLitecoinFees {\n  litecoin {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetLitecoinTransactions($address: String!, $pageSize: Int!, $pageNumber: Int!) {\n  litecoin {\n    transactionsV2(address: $address, pageSize: $pageSize, pageNumber: $pageNumber) {\n      balanceChange {\n        value\n      }\n      blockNumber\n      fee {\n        value\n      }\n      hash\n      inputs {\n        address\n        amount {\n          value\n        }\n      }\n      outputs {\n        amount {\n          value\n        }\n        address\n      }\n      timestamp\n      status\n    }\n  }\n}\n\nquery LitecoinBroadcastTransaction($rawHex: String!) {\n  litecoin {\n    broadcastTransaction(rawHex: $rawHex)\n  }\n}\n\nquery LitecoinScanUTXOs($address: String!, $page: Int!) {\n  litecoin {\n    unspentTxOutputsV5(address: $address, page: $page) {\n      oTxHash\n      oIndex\n      value {\n        value\n      }\n      oTxHex\n      address\n      isCoinbase\n      scriptHex\n    }\n  }\n}\n\nquery LitecoinGetTransactionByHash($txHash: String!) {\n  litecoin {\n    getTransactionByHashV5(txHash: $txHash) {\n      hex\n      txid\n      hash\n      size\n      version\n      locktime\n      confirmations\n      blocktime\n      time\n      blockhash\n      blockNumber\n      sourceOfData\n      inputs {\n        address\n      }\n      outputs {\n        address\n      }\n    }\n  }\n}':
    types.LitecoinBalanceDocument,
  'query GetSolanaBalance($address: String!) {\n  solana {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        name\n        image\n        price {\n          amount\n          dayPriceChange\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetSolanaTransactions($address: String!, $first: Int!, $after: String) {\n  solana {\n    transactions(address: $address, first: $first, after: $after) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          fee {\n            amount {\n              value\n            }\n            payer\n          }\n          hash\n          slot\n          status\n          timestamp\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              decimals\n              id\n              image\n              name\n              price {\n                amount\n              }\n              symbol\n            }\n            fromAddress\n            toAddress\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetSolanaStatus {\n  solana {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery GetSolanaFee {\n  solana {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}':
    types.GetSolanaBalanceDocument,
  'query GetMayachainBalances($address: String!) {\n  mayachain {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        name\n        image\n        price {\n          amount\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetMayachainTransactions($address: String!, $first: Int!, $after: String) {\n  mayachain {\n    transactions(address: $address, first: $first, after: $after) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          fee {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              id\n              decimals\n              image\n              name\n              symbol\n              price {\n                amount\n              }\n              type\n            }\n          }\n          hash\n          status\n          timestamp\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                }\n                symbol\n                type\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetMayachainStatus {\n  mayachain {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery GetMayachainFee {\n  mayachain {\n    fee {\n      outboundTransactionFee\n      nativeTransactionFee\n      tnsRegisterFee\n      tnsFeeOnSale\n      tnsFeePerBlock\n    }\n  }\n}':
    types.GetMayachainBalancesDocument,
  'query GetThorchainBalances($address: String!) {\n  thorchain {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        name\n        image\n        price {\n          amount\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetThorchainTransactions($address: String!, $first: Int!, $after: String) {\n  thorchain {\n    transactions(address: $address, first: $first, after: $after) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          fee {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              id\n              decimals\n              image\n              name\n              symbol\n              price {\n                amount\n              }\n              type\n            }\n          }\n          hash\n          status\n          timestamp\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                }\n                symbol\n                type\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetThorchainStatus {\n  thorchain {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery GetThorchainFee {\n  thorchain {\n    fee {\n      outboundTransactionFee\n      nativeTransactionFee\n      tnsRegisterFee\n      tnsFeeOnSale\n      tnsFeePerBlock\n    }\n  }\n}':
    types.GetThorchainBalancesDocument,
  'query GetTronBalance($address: String!) {\n  tron {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          scalingFactor\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n        scalingFactor\n      }\n    }\n  }\n}\n\nquery GetTronTransactions($address: String!, $first: Int) {\n  tron {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          toAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}':
    types.GetTronBalanceDocument,
  'query GetCryptoAssets($input: [CryptoAssetArgs!]!) {\n  assets {\n    cryptoAssets(input: $input) {\n      chain\n      contract\n      id\n      name\n      symbol\n      image\n      decimals\n      price {\n        amount\n        scalingFactor\n      }\n    }\n  }\n}':
    types.GetCryptoAssetsDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'query GetBinanceBalances($address: String!) {\n  binance {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        symbol\n        price {\n          amount\n          scalingFactor\n          dayPriceChange\n        }\n      }\n    }\n  }\n}\n\nquery GetBinanceTransactions($address: String!, $first: Int, $after: String, $blockRange: OptBlockSelector) {\n  binance {\n    transactions(\n      address: $address\n      first: $first\n      after: $after\n      blockRange: $blockRange\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          amount {\n            value\n          }\n          asset {\n            chain\n            contract\n            decimals\n            id\n            image\n            name\n            price {\n              amount\n              scalingFactor\n            }\n            symbol\n            type\n          }\n          blockHeight\n          data\n          fee {\n            value\n          }\n          fromAddress\n          hash\n          status\n          time\n          toAddress\n          type\n        }\n      }\n    }\n  }\n}\n\nquery GetBinanceFee {\n  binance {\n    fee\n  }\n}\n\nquery GetBinanceStatus {\n  binance {\n    status {\n      lastBlock {\n        hash\n        height\n        time\n        txCount\n      }\n    }\n  }\n}'
): typeof documents['query GetBinanceBalances($address: String!) {\n  binance {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        symbol\n        price {\n          amount\n          scalingFactor\n          dayPriceChange\n        }\n      }\n    }\n  }\n}\n\nquery GetBinanceTransactions($address: String!, $first: Int, $after: String, $blockRange: OptBlockSelector) {\n  binance {\n    transactions(\n      address: $address\n      first: $first\n      after: $after\n      blockRange: $blockRange\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          amount {\n            value\n          }\n          asset {\n            chain\n            contract\n            decimals\n            id\n            image\n            name\n            price {\n              amount\n              scalingFactor\n            }\n            symbol\n            type\n          }\n          blockHeight\n          data\n          fee {\n            value\n          }\n          fromAddress\n          hash\n          status\n          time\n          toAddress\n          type\n        }\n      }\n    }\n  }\n}\n\nquery GetBinanceFee {\n  binance {\n    fee\n  }\n}\n\nquery GetBinanceStatus {\n  binance {\n    status {\n      lastBlock {\n        hash\n        height\n        time\n        txCount\n      }\n    }\n  }\n}'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'query BitcoinBalance($address: String!) {\n  bitcoin {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          dayPriceChange\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetBitcoinFees {\n  bitcoin {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetBitcoinTransactions($address: String!, $pageSize: Int!, $pageNumber: Int!) {\n  bitcoin {\n    transactionsV2(address: $address, pageSize: $pageSize, pageNumber: $pageNumber) {\n      balanceChange {\n        value\n      }\n      blockNumber\n      fee {\n        value\n      }\n      hash\n      inputs {\n        address\n        amount {\n          value\n        }\n      }\n      outputs {\n        amount {\n          value\n        }\n        address\n      }\n      timestamp\n      status\n    }\n  }\n}\n\nquery BitcoinBroadcastTransaction($rawHex: String!) {\n  bitcoin {\n    broadcastTransaction(rawHex: $rawHex)\n  }\n}\n\nquery BitcoinScanUTXOs($address: String!, $page: Int!) {\n  bitcoin {\n    unspentTxOutputsV5(address: $address, page: $page) {\n      oTxHash\n      oIndex\n      value {\n        value\n      }\n      oTxHex\n      address\n      isCoinbase\n      scriptHex\n    }\n  }\n}\n\nquery BitcoinGetTransactionByHash($txHash: String!) {\n  bitcoin {\n    getTransactionByHashV5(txHash: $txHash) {\n      hex\n      txid\n      hash\n      size\n      version\n      locktime\n      confirmations\n      blocktime\n      time\n      blockhash\n      blockNumber\n      sourceOfData\n      inputs {\n        address\n      }\n      outputs {\n        address\n      }\n    }\n  }\n}'
): typeof documents['query BitcoinBalance($address: String!) {\n  bitcoin {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          dayPriceChange\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetBitcoinFees {\n  bitcoin {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetBitcoinTransactions($address: String!, $pageSize: Int!, $pageNumber: Int!) {\n  bitcoin {\n    transactionsV2(address: $address, pageSize: $pageSize, pageNumber: $pageNumber) {\n      balanceChange {\n        value\n      }\n      blockNumber\n      fee {\n        value\n      }\n      hash\n      inputs {\n        address\n        amount {\n          value\n        }\n      }\n      outputs {\n        amount {\n          value\n        }\n        address\n      }\n      timestamp\n      status\n    }\n  }\n}\n\nquery BitcoinBroadcastTransaction($rawHex: String!) {\n  bitcoin {\n    broadcastTransaction(rawHex: $rawHex)\n  }\n}\n\nquery BitcoinScanUTXOs($address: String!, $page: Int!) {\n  bitcoin {\n    unspentTxOutputsV5(address: $address, page: $page) {\n      oTxHash\n      oIndex\n      value {\n        value\n      }\n      oTxHex\n      address\n      isCoinbase\n      scriptHex\n    }\n  }\n}\n\nquery BitcoinGetTransactionByHash($txHash: String!) {\n  bitcoin {\n    getTransactionByHashV5(txHash: $txHash) {\n      hex\n      txid\n      hash\n      size\n      version\n      locktime\n      confirmations\n      blocktime\n      time\n      blockhash\n      blockNumber\n      sourceOfData\n      inputs {\n        address\n      }\n      outputs {\n        address\n      }\n    }\n  }\n}'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'query BitcoinCashBalance($address: String!) {\n  bitcoincash {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          dayPriceChange\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetBitcoinCashFees {\n  bitcoincash {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetBitcoinCashTransactions($address: String!, $pageSize: Int!, $pageNumber: Int!) {\n  bitcoincash {\n    transactionsV2(address: $address, pageSize: $pageSize, pageNumber: $pageNumber) {\n      balanceChange {\n        value\n      }\n      blockNumber\n      fee {\n        value\n      }\n      hash\n      inputs {\n        address\n        amount {\n          value\n        }\n      }\n      outputs {\n        amount {\n          value\n        }\n        address\n      }\n      timestamp\n      status\n    }\n  }\n}\n\nquery BitcoinCashBroadcastTransaction($rawHex: String!) {\n  bitcoincash {\n    broadcastTransaction(rawHex: $rawHex)\n  }\n}\n\nquery BitcoinCashScanUTXOs($address: String!, $page: Int!) {\n  bitcoincash {\n    unspentTxOutputsV5(address: $address, page: $page) {\n      oTxHash\n      oIndex\n      value {\n        value\n      }\n      oTxHex\n      address\n      isCoinbase\n      scriptHex\n    }\n  }\n}\n\nquery BitcoinCashGetTransactionByHash($txHash: String!) {\n  bitcoincash {\n    getTransactionByHashV5(txHash: $txHash) {\n      hex\n      txid\n      hash\n      size\n      version\n      locktime\n      confirmations\n      blocktime\n      time\n      blockhash\n      blockNumber\n      sourceOfData\n      inputs {\n        address\n      }\n      outputs {\n        address\n      }\n    }\n  }\n}'
): typeof documents['query BitcoinCashBalance($address: String!) {\n  bitcoincash {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          dayPriceChange\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetBitcoinCashFees {\n  bitcoincash {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetBitcoinCashTransactions($address: String!, $pageSize: Int!, $pageNumber: Int!) {\n  bitcoincash {\n    transactionsV2(address: $address, pageSize: $pageSize, pageNumber: $pageNumber) {\n      balanceChange {\n        value\n      }\n      blockNumber\n      fee {\n        value\n      }\n      hash\n      inputs {\n        address\n        amount {\n          value\n        }\n      }\n      outputs {\n        amount {\n          value\n        }\n        address\n      }\n      timestamp\n      status\n    }\n  }\n}\n\nquery BitcoinCashBroadcastTransaction($rawHex: String!) {\n  bitcoincash {\n    broadcastTransaction(rawHex: $rawHex)\n  }\n}\n\nquery BitcoinCashScanUTXOs($address: String!, $page: Int!) {\n  bitcoincash {\n    unspentTxOutputsV5(address: $address, page: $page) {\n      oTxHash\n      oIndex\n      value {\n        value\n      }\n      oTxHex\n      address\n      isCoinbase\n      scriptHex\n    }\n  }\n}\n\nquery BitcoinCashGetTransactionByHash($txHash: String!) {\n  bitcoincash {\n    getTransactionByHashV5(txHash: $txHash) {\n      hex\n      txid\n      hash\n      size\n      version\n      locktime\n      confirmations\n      blocktime\n      time\n      blockhash\n      blockNumber\n      sourceOfData\n      inputs {\n        address\n      }\n      outputs {\n        address\n      }\n    }\n  }\n}'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'query GetAssetsWithFilter($page: ConnectionArgs!, $filter: TokenFilter) {\n  assets {\n    tokens(page: $page, filter: $filter) {\n      page {\n        edges {\n          node {\n            contracts {\n              address\n              symbol\n              chain\n              scalingFactor\n            }\n            id\n            price {\n              amount\n              scalingFactor\n            }\n            symbol\n            name\n            icon\n          }\n        }\n      }\n    }\n  }\n}'
): typeof documents['query GetAssetsWithFilter($page: ConnectionArgs!, $filter: TokenFilter) {\n  assets {\n    tokens(page: $page, filter: $filter) {\n      page {\n        edges {\n          node {\n            contracts {\n              address\n              symbol\n              chain\n              scalingFactor\n            }\n            id\n            price {\n              amount\n              scalingFactor\n            }\n            symbol\n            name\n            icon\n          }\n        }\n      }\n    }\n  }\n}'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'query CosmosBalance($address: String!) {\n  cosmos {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n          dayPriceChange\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetCosmosTransactions($address: String!, $blockRange: OptBlockRange!, $first: Int!, $after: String) {\n  cosmos {\n    transactions(\n      address: $address\n      blockRange: $blockRange\n      first: $first\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetCosmosFees {\n  cosmos {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetCosmosStatus {\n  cosmos {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery OsmosisBalance($address: String!) {\n  osmosis {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n          dayPriceChange\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetOsmosisTransactions($address: String!, $blockRange: OptBlockRange!, $first: Int!, $after: String) {\n  osmosis {\n    transactions(\n      address: $address\n      blockRange: $blockRange\n      first: $first\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetOsmosisFees {\n  osmosis {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetOsmosisStatus {\n  osmosis {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery AxelarBalance($address: String!) {\n  axelar {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n          dayPriceChange\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetAxelarTransactions($address: String!, $blockRange: OptBlockRange!, $first: Int!, $after: String) {\n  axelar {\n    transactions(\n      address: $address\n      blockRange: $blockRange\n      first: $first\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetAxelarFees {\n  axelar {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetAxelarStatus {\n  axelar {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery CrescentBalance($address: String!) {\n  crescent {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n          dayPriceChange\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetCrescentTransactions($address: String!, $blockRange: OptBlockRange!, $first: Int!, $after: String) {\n  crescent {\n    transactions(\n      address: $address\n      blockRange: $blockRange\n      first: $first\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetCrescentFees {\n  crescent {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetCrescentStatus {\n  crescent {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery KavaBalance($address: String!) {\n  kava {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n          dayPriceChange\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetKavaTransactions($address: String!, $blockRange: OptBlockRange!, $first: Int!, $after: String) {\n  kava {\n    transactions(\n      address: $address\n      blockRange: $blockRange\n      first: $first\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetKavaFees {\n  kava {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetKavaStatus {\n  kava {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery AkashBalance($address: String!) {\n  akash {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n          dayPriceChange\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetAkashTransactions($address: String!, $blockRange: OptBlockRange!, $first: Int!, $after: String) {\n  akash {\n    transactions(\n      address: $address\n      blockRange: $blockRange\n      first: $first\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetAkashFees {\n  akash {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetAkashStatus {\n  akash {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery CronosBalance($address: String!) {\n  cronos {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n          dayPriceChange\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetCronosTransactions($address: String!, $blockRange: OptBlockRange!, $first: Int!, $after: String) {\n  cronos {\n    transactions(\n      address: $address\n      blockRange: $blockRange\n      first: $first\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetCronosFees {\n  cronos {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetCronosStatus {\n  cronos {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery KujiraBalance($address: String!) {\n  kujira {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n          dayPriceChange\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetKujiraTransactions($address: String!, $blockRange: OptBlockRange!, $first: Int!, $after: String) {\n  kujira {\n    transactions(\n      address: $address\n      blockRange: $blockRange\n      first: $first\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetKujiraFees {\n  kujira {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetKujiraStatus {\n  kujira {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery StrideBalance($address: String!) {\n  stride {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n          dayPriceChange\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetStrideTransactions($address: String!, $blockRange: OptBlockRange!, $first: Int!, $after: String) {\n  stride {\n    transactions(\n      address: $address\n      blockRange: $blockRange\n      first: $first\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetStrideFees {\n  stride {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetStrideStatus {\n  stride {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery MarsBalance($address: String!) {\n  mars {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n          dayPriceChange\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetMarsTransactions($address: String!, $blockRange: OptBlockRange!, $first: Int!, $after: String) {\n  mars {\n    transactions(\n      address: $address\n      blockRange: $blockRange\n      first: $first\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetMarsFees {\n  mars {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetMarsStatus {\n  mars {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery JunoBalance($address: String!) {\n  juno {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n          dayPriceChange\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetJunoTransactions($address: String!, $blockRange: OptBlockRange!, $first: Int!, $after: String) {\n  juno {\n    transactions(\n      address: $address\n      blockRange: $blockRange\n      first: $first\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetJunoFees {\n  juno {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetJunoStatus {\n  juno {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery StargazeBalance($address: String!) {\n  stargaze {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n          dayPriceChange\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetStargazeTransactions($address: String!, $blockRange: OptBlockRange!, $first: Int!, $after: String) {\n  stargaze {\n    transactions(\n      address: $address\n      blockRange: $blockRange\n      first: $first\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetStargazeFees {\n  stargaze {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetStargazeStatus {\n  stargaze {\n    status {\n      lastBlock\n    }\n  }\n}'
): typeof documents['query CosmosBalance($address: String!) {\n  cosmos {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n          dayPriceChange\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetCosmosTransactions($address: String!, $blockRange: OptBlockRange!, $first: Int!, $after: String) {\n  cosmos {\n    transactions(\n      address: $address\n      blockRange: $blockRange\n      first: $first\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetCosmosFees {\n  cosmos {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetCosmosStatus {\n  cosmos {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery OsmosisBalance($address: String!) {\n  osmosis {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n          dayPriceChange\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetOsmosisTransactions($address: String!, $blockRange: OptBlockRange!, $first: Int!, $after: String) {\n  osmosis {\n    transactions(\n      address: $address\n      blockRange: $blockRange\n      first: $first\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetOsmosisFees {\n  osmosis {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetOsmosisStatus {\n  osmosis {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery AxelarBalance($address: String!) {\n  axelar {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n          dayPriceChange\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetAxelarTransactions($address: String!, $blockRange: OptBlockRange!, $first: Int!, $after: String) {\n  axelar {\n    transactions(\n      address: $address\n      blockRange: $blockRange\n      first: $first\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetAxelarFees {\n  axelar {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetAxelarStatus {\n  axelar {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery CrescentBalance($address: String!) {\n  crescent {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n          dayPriceChange\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetCrescentTransactions($address: String!, $blockRange: OptBlockRange!, $first: Int!, $after: String) {\n  crescent {\n    transactions(\n      address: $address\n      blockRange: $blockRange\n      first: $first\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetCrescentFees {\n  crescent {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetCrescentStatus {\n  crescent {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery KavaBalance($address: String!) {\n  kava {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n          dayPriceChange\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetKavaTransactions($address: String!, $blockRange: OptBlockRange!, $first: Int!, $after: String) {\n  kava {\n    transactions(\n      address: $address\n      blockRange: $blockRange\n      first: $first\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetKavaFees {\n  kava {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetKavaStatus {\n  kava {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery AkashBalance($address: String!) {\n  akash {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n          dayPriceChange\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetAkashTransactions($address: String!, $blockRange: OptBlockRange!, $first: Int!, $after: String) {\n  akash {\n    transactions(\n      address: $address\n      blockRange: $blockRange\n      first: $first\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetAkashFees {\n  akash {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetAkashStatus {\n  akash {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery CronosBalance($address: String!) {\n  cronos {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n          dayPriceChange\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetCronosTransactions($address: String!, $blockRange: OptBlockRange!, $first: Int!, $after: String) {\n  cronos {\n    transactions(\n      address: $address\n      blockRange: $blockRange\n      first: $first\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetCronosFees {\n  cronos {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetCronosStatus {\n  cronos {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery KujiraBalance($address: String!) {\n  kujira {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n          dayPriceChange\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetKujiraTransactions($address: String!, $blockRange: OptBlockRange!, $first: Int!, $after: String) {\n  kujira {\n    transactions(\n      address: $address\n      blockRange: $blockRange\n      first: $first\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetKujiraFees {\n  kujira {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetKujiraStatus {\n  kujira {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery StrideBalance($address: String!) {\n  stride {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n          dayPriceChange\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetStrideTransactions($address: String!, $blockRange: OptBlockRange!, $first: Int!, $after: String) {\n  stride {\n    transactions(\n      address: $address\n      blockRange: $blockRange\n      first: $first\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetStrideFees {\n  stride {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetStrideStatus {\n  stride {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery MarsBalance($address: String!) {\n  mars {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n          dayPriceChange\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetMarsTransactions($address: String!, $blockRange: OptBlockRange!, $first: Int!, $after: String) {\n  mars {\n    transactions(\n      address: $address\n      blockRange: $blockRange\n      first: $first\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetMarsFees {\n  mars {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetMarsStatus {\n  mars {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery JunoBalance($address: String!) {\n  juno {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n          dayPriceChange\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetJunoTransactions($address: String!, $blockRange: OptBlockRange!, $first: Int!, $after: String) {\n  juno {\n    transactions(\n      address: $address\n      blockRange: $blockRange\n      first: $first\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetJunoFees {\n  juno {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetJunoStatus {\n  juno {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery StargazeBalance($address: String!) {\n  stargaze {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n          dayPriceChange\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetStargazeTransactions($address: String!, $blockRange: OptBlockRange!, $first: Int!, $after: String) {\n  stargaze {\n    transactions(\n      address: $address\n      blockRange: $blockRange\n      first: $first\n      after: $after\n    ) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          blockHeight\n          blockIndex\n          hash\n          status\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              name\n              symbol\n              image\n              decimals\n            }\n            fromAddress\n            toAddress\n          }\n          timestamp\n          fee {\n            amount {\n              amount {\n                value\n              }\n              asset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                symbol\n                price {\n                  amount\n                }\n              }\n            }\n            payer\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetStargazeFees {\n  stargaze {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetStargazeStatus {\n  stargaze {\n    status {\n      lastBlock\n    }\n  }\n}'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'query TerraBalance($address: String!) {\n  terra {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n          dayPriceChange\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetTerraFees {\n  terra {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetTerraStatus {\n  terra {\n    status {\n      lastBlock\n    }\n  }\n}'
): typeof documents['query TerraBalance($address: String!) {\n  terra {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          scalingFactor\n          dayPriceChange\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetTerraFees {\n  terra {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetTerraStatus {\n  terra {\n    status {\n      lastBlock\n    }\n  }\n}'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'query DogecoinBalance($address: String!) {\n  dogecoin {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          dayPriceChange\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetDogecoinFees {\n  dogecoin {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetDogecoinTransactions($address: String!, $pageSize: Int!, $pageNumber: Int!) {\n  dogecoin {\n    transactionsV2(address: $address, pageSize: $pageSize, pageNumber: $pageNumber) {\n      balanceChange {\n        value\n      }\n      blockNumber\n      fee {\n        value\n      }\n      hash\n      inputs {\n        address\n        amount {\n          value\n        }\n      }\n      outputs {\n        amount {\n          value\n        }\n        address\n      }\n      timestamp\n      status\n    }\n  }\n}\n\nquery DogecoinBroadcastTransaction($rawHex: String!) {\n  dogecoin {\n    broadcastTransaction(rawHex: $rawHex)\n  }\n}\n\nquery DogecoinScanUTXOs($address: String!, $page: Int!) {\n  dogecoin {\n    unspentTxOutputsV5(address: $address, page: $page) {\n      oTxHash\n      oIndex\n      value {\n        value\n      }\n      oTxHex\n      address\n      isCoinbase\n      scriptHex\n    }\n  }\n}\n\nquery DogecoinGetTransactionByHash($txHash: String!) {\n  dogecoin {\n    getTransactionByHashV5(txHash: $txHash) {\n      hex\n      txid\n      hash\n      size\n      version\n      locktime\n      confirmations\n      blocktime\n      time\n      blockhash\n      blockNumber\n      sourceOfData\n      inputs {\n        address\n      }\n      outputs {\n        address\n      }\n    }\n  }\n}'
): typeof documents['query DogecoinBalance($address: String!) {\n  dogecoin {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          dayPriceChange\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetDogecoinFees {\n  dogecoin {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetDogecoinTransactions($address: String!, $pageSize: Int!, $pageNumber: Int!) {\n  dogecoin {\n    transactionsV2(address: $address, pageSize: $pageSize, pageNumber: $pageNumber) {\n      balanceChange {\n        value\n      }\n      blockNumber\n      fee {\n        value\n      }\n      hash\n      inputs {\n        address\n        amount {\n          value\n        }\n      }\n      outputs {\n        amount {\n          value\n        }\n        address\n      }\n      timestamp\n      status\n    }\n  }\n}\n\nquery DogecoinBroadcastTransaction($rawHex: String!) {\n  dogecoin {\n    broadcastTransaction(rawHex: $rawHex)\n  }\n}\n\nquery DogecoinScanUTXOs($address: String!, $page: Int!) {\n  dogecoin {\n    unspentTxOutputsV5(address: $address, page: $page) {\n      oTxHash\n      oIndex\n      value {\n        value\n      }\n      oTxHex\n      address\n      isCoinbase\n      scriptHex\n    }\n  }\n}\n\nquery DogecoinGetTransactionByHash($txHash: String!) {\n  dogecoin {\n    getTransactionByHashV5(txHash: $txHash) {\n      hex\n      txid\n      hash\n      size\n      version\n      locktime\n      confirmations\n      blocktime\n      time\n      blockhash\n      blockNumber\n      sourceOfData\n      inputs {\n        address\n      }\n      outputs {\n        address\n      }\n    }\n  }\n}'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'query GetArbitrumBalance($address: String!) {\n  arbitrum {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n      }\n    }\n  }\n}\n\nquery ArbitrumDefaultGasFees {\n  arbitrum {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetArbitrumTransactions($address: String!, $first: Int) {\n  arbitrum {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetArbitrumStatus {\n  arbitrum {\n    status {\n      lastBlock\n    }\n  }\n}'
): typeof documents['query GetArbitrumBalance($address: String!) {\n  arbitrum {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n      }\n    }\n  }\n}\n\nquery ArbitrumDefaultGasFees {\n  arbitrum {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetArbitrumTransactions($address: String!, $first: Int) {\n  arbitrum {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetArbitrumStatus {\n  arbitrum {\n    status {\n      lastBlock\n    }\n  }\n}'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'query GetAuroraBalance($address: String!) {\n  aurora {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n      }\n    }\n  }\n}\n\nquery AuroraDefaultGasFees {\n  aurora {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetAuroraTransactions($address: String!, $first: Int) {\n  aurora {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetAuroraStatus {\n  aurora {\n    status {\n      lastBlock\n    }\n  }\n}'
): typeof documents['query GetAuroraBalance($address: String!) {\n  aurora {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n      }\n    }\n  }\n}\n\nquery AuroraDefaultGasFees {\n  aurora {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetAuroraTransactions($address: String!, $first: Int) {\n  aurora {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetAuroraStatus {\n  aurora {\n    status {\n      lastBlock\n    }\n  }\n}'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'query GetAvalancheBalance($address: String!) {\n  avalanche {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n      }\n    }\n  }\n}\n\nquery AvalancheEIP1559GasFees {\n  avalanche {\n    fee {\n      high {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      low {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      medium {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n    }\n  }\n}\n\nquery GetAvalancheTransactions($address: String!, $first: Int) {\n  avalanche {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetAvalancheStatus {\n  avalanche {\n    status {\n      lastBlock\n    }\n  }\n}'
): typeof documents['query GetAvalancheBalance($address: String!) {\n  avalanche {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n      }\n    }\n  }\n}\n\nquery AvalancheEIP1559GasFees {\n  avalanche {\n    fee {\n      high {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      low {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      medium {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n    }\n  }\n}\n\nquery GetAvalancheTransactions($address: String!, $first: Int) {\n  avalanche {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetAvalancheStatus {\n  avalanche {\n    status {\n      lastBlock\n    }\n  }\n}'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'query GetCantoEVMBalance($address: String!) {\n  cantoEVM {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n      }\n    }\n  }\n}\n\nquery CantoEVMEIP1559GasFees {\n  cantoEVM {\n    fee {\n      high {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      low {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      medium {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n    }\n  }\n}\n\nquery GetCantoEVMTransactions($address: String!, $first: Int) {\n  cantoEVM {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetCantoEVMStatus {\n  cantoEVM {\n    status {\n      lastBlock\n    }\n  }\n}'
): typeof documents['query GetCantoEVMBalance($address: String!) {\n  cantoEVM {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n      }\n    }\n  }\n}\n\nquery CantoEVMEIP1559GasFees {\n  cantoEVM {\n    fee {\n      high {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      low {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      medium {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n    }\n  }\n}\n\nquery GetCantoEVMTransactions($address: String!, $first: Int) {\n  cantoEVM {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetCantoEVMStatus {\n  cantoEVM {\n    status {\n      lastBlock\n    }\n  }\n}'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'query GetCronosEVMBalance($address: String!) {\n  cronosEVM {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n      }\n    }\n  }\n}\n\nquery CronosEVMEIP1559GasFees {\n  cronosEVM {\n    fee {\n      high {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      low {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      medium {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n    }\n  }\n}\n\nquery GetCronosEVMTransactions($address: String!, $first: Int) {\n  cronosEVM {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetCronosEVMStatus {\n  cronosEVM {\n    status {\n      lastBlock\n    }\n  }\n}'
): typeof documents['query GetCronosEVMBalance($address: String!) {\n  cronosEVM {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n      }\n    }\n  }\n}\n\nquery CronosEVMEIP1559GasFees {\n  cronosEVM {\n    fee {\n      high {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      low {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      medium {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n    }\n  }\n}\n\nquery GetCronosEVMTransactions($address: String!, $first: Int) {\n  cronosEVM {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetCronosEVMStatus {\n  cronosEVM {\n    status {\n      lastBlock\n    }\n  }\n}'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'query GetEthereumBalance($address: String!) {\n  ethereum {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n      }\n    }\n  }\n}\n\nquery EthereumEIP1559GasFees {\n  ethereum {\n    fee {\n      high {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      low {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      medium {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n    }\n  }\n}\n\nquery GetEthereumTransactions($address: String!, $first: Int) {\n  ethereum {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetEthereumStatus {\n  ethereum {\n    status {\n      lastBlock\n    }\n  }\n}'
): typeof documents['query GetEthereumBalance($address: String!) {\n  ethereum {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n      }\n    }\n  }\n}\n\nquery EthereumEIP1559GasFees {\n  ethereum {\n    fee {\n      high {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      low {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      medium {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n    }\n  }\n}\n\nquery GetEthereumTransactions($address: String!, $first: Int) {\n  ethereum {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetEthereumStatus {\n  ethereum {\n    status {\n      lastBlock\n    }\n  }\n}'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'query GetFantomBalance($address: String!) {\n  fantom {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n      }\n    }\n  }\n}\n\nquery FantomEIP1559GasFees {\n  fantom {\n    fee {\n      high {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      low {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      medium {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n    }\n  }\n}\n\nquery GetFantomTransactions($address: String!, $first: Int) {\n  fantom {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetFantomStatus {\n  fantom {\n    status {\n      lastBlock\n    }\n  }\n}'
): typeof documents['query GetFantomBalance($address: String!) {\n  fantom {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n      }\n    }\n  }\n}\n\nquery FantomEIP1559GasFees {\n  fantom {\n    fee {\n      high {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      low {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      medium {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n    }\n  }\n}\n\nquery GetFantomTransactions($address: String!, $first: Int) {\n  fantom {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetFantomStatus {\n  fantom {\n    status {\n      lastBlock\n    }\n  }\n}'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'query GetOptimismBalance($address: String!) {\n  optimism {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n      }\n    }\n  }\n}\n\nquery OptimismEIP1559GasFees {\n  optimism {\n    fee {\n      high {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      low {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      medium {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n    }\n  }\n}\n\nquery GetOptimismTransactions($address: String!, $first: Int) {\n  optimism {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetOptimismStatus {\n  optimism {\n    status {\n      lastBlock\n    }\n  }\n}'
): typeof documents['query GetOptimismBalance($address: String!) {\n  optimism {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n      }\n    }\n  }\n}\n\nquery OptimismEIP1559GasFees {\n  optimism {\n    fee {\n      high {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      low {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      medium {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n    }\n  }\n}\n\nquery GetOptimismTransactions($address: String!, $first: Int) {\n  optimism {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetOptimismStatus {\n  optimism {\n    status {\n      lastBlock\n    }\n  }\n}'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'query GetPolygonBalance($address: String!) {\n  polygon {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n      }\n    }\n  }\n}\n\nquery PolygonEIP1559GasFees {\n  polygon {\n    fee {\n      high {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      low {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      medium {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n    }\n  }\n}\n\nquery GetPolygonTransactions($address: String!, $first: Int) {\n  polygon {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetPolygonStatus {\n  polygon {\n    status {\n      lastBlock\n    }\n  }\n}'
): typeof documents['query GetPolygonBalance($address: String!) {\n  polygon {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n      }\n    }\n  }\n}\n\nquery PolygonEIP1559GasFees {\n  polygon {\n    fee {\n      high {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      low {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      medium {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n    }\n  }\n}\n\nquery GetPolygonTransactions($address: String!, $first: Int) {\n  polygon {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetPolygonStatus {\n  polygon {\n    status {\n      lastBlock\n    }\n  }\n}'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'query GetSmartChainBalance($address: String!) {\n  binanceSmartChain {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n      }\n    }\n  }\n}\n\nquery SmartChainDefaultGasFees {\n  binanceSmartChain {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetSmartChainTransactions($address: String!, $first: Int) {\n  binanceSmartChain {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetSmartChainStatus {\n  binanceSmartChain {\n    status {\n      lastBlock\n    }\n  }\n}'
): typeof documents['query GetSmartChainBalance($address: String!) {\n  binanceSmartChain {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n      }\n    }\n  }\n}\n\nquery SmartChainDefaultGasFees {\n  binanceSmartChain {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetSmartChainTransactions($address: String!, $first: Int) {\n  binanceSmartChain {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetSmartChainStatus {\n  binanceSmartChain {\n    status {\n      lastBlock\n    }\n  }\n}'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'query LitecoinBalance($address: String!) {\n  litecoin {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          dayPriceChange\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetLitecoinFees {\n  litecoin {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetLitecoinTransactions($address: String!, $pageSize: Int!, $pageNumber: Int!) {\n  litecoin {\n    transactionsV2(address: $address, pageSize: $pageSize, pageNumber: $pageNumber) {\n      balanceChange {\n        value\n      }\n      blockNumber\n      fee {\n        value\n      }\n      hash\n      inputs {\n        address\n        amount {\n          value\n        }\n      }\n      outputs {\n        amount {\n          value\n        }\n        address\n      }\n      timestamp\n      status\n    }\n  }\n}\n\nquery LitecoinBroadcastTransaction($rawHex: String!) {\n  litecoin {\n    broadcastTransaction(rawHex: $rawHex)\n  }\n}\n\nquery LitecoinScanUTXOs($address: String!, $page: Int!) {\n  litecoin {\n    unspentTxOutputsV5(address: $address, page: $page) {\n      oTxHash\n      oIndex\n      value {\n        value\n      }\n      oTxHex\n      address\n      isCoinbase\n      scriptHex\n    }\n  }\n}\n\nquery LitecoinGetTransactionByHash($txHash: String!) {\n  litecoin {\n    getTransactionByHashV5(txHash: $txHash) {\n      hex\n      txid\n      hash\n      size\n      version\n      locktime\n      confirmations\n      blocktime\n      time\n      blockhash\n      blockNumber\n      sourceOfData\n      inputs {\n        address\n      }\n      outputs {\n        address\n      }\n    }\n  }\n}'
): typeof documents['query LitecoinBalance($address: String!) {\n  litecoin {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        image\n        name\n        price {\n          amount\n          dayPriceChange\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetLitecoinFees {\n  litecoin {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetLitecoinTransactions($address: String!, $pageSize: Int!, $pageNumber: Int!) {\n  litecoin {\n    transactionsV2(address: $address, pageSize: $pageSize, pageNumber: $pageNumber) {\n      balanceChange {\n        value\n      }\n      blockNumber\n      fee {\n        value\n      }\n      hash\n      inputs {\n        address\n        amount {\n          value\n        }\n      }\n      outputs {\n        amount {\n          value\n        }\n        address\n      }\n      timestamp\n      status\n    }\n  }\n}\n\nquery LitecoinBroadcastTransaction($rawHex: String!) {\n  litecoin {\n    broadcastTransaction(rawHex: $rawHex)\n  }\n}\n\nquery LitecoinScanUTXOs($address: String!, $page: Int!) {\n  litecoin {\n    unspentTxOutputsV5(address: $address, page: $page) {\n      oTxHash\n      oIndex\n      value {\n        value\n      }\n      oTxHex\n      address\n      isCoinbase\n      scriptHex\n    }\n  }\n}\n\nquery LitecoinGetTransactionByHash($txHash: String!) {\n  litecoin {\n    getTransactionByHashV5(txHash: $txHash) {\n      hex\n      txid\n      hash\n      size\n      version\n      locktime\n      confirmations\n      blocktime\n      time\n      blockhash\n      blockNumber\n      sourceOfData\n      inputs {\n        address\n      }\n      outputs {\n        address\n      }\n    }\n  }\n}'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'query GetSolanaBalance($address: String!) {\n  solana {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        name\n        image\n        price {\n          amount\n          dayPriceChange\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetSolanaTransactions($address: String!, $first: Int!, $after: String) {\n  solana {\n    transactions(address: $address, first: $first, after: $after) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          fee {\n            amount {\n              value\n            }\n            payer\n          }\n          hash\n          slot\n          status\n          timestamp\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              decimals\n              id\n              image\n              name\n              price {\n                amount\n              }\n              symbol\n            }\n            fromAddress\n            toAddress\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetSolanaStatus {\n  solana {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery GetSolanaFee {\n  solana {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}'
): typeof documents['query GetSolanaBalance($address: String!) {\n  solana {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        name\n        image\n        price {\n          amount\n          dayPriceChange\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetSolanaTransactions($address: String!, $first: Int!, $after: String) {\n  solana {\n    transactions(address: $address, first: $first, after: $after) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          fee {\n            amount {\n              value\n            }\n            payer\n          }\n          hash\n          slot\n          status\n          timestamp\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              decimals\n              id\n              image\n              name\n              price {\n                amount\n              }\n              symbol\n            }\n            fromAddress\n            toAddress\n          }\n          signers\n        }\n      }\n    }\n  }\n}\n\nquery GetSolanaStatus {\n  solana {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery GetSolanaFee {\n  solana {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'query GetMayachainBalances($address: String!) {\n  mayachain {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        name\n        image\n        price {\n          amount\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetMayachainTransactions($address: String!, $first: Int!, $after: String) {\n  mayachain {\n    transactions(address: $address, first: $first, after: $after) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          fee {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              id\n              decimals\n              image\n              name\n              symbol\n              price {\n                amount\n              }\n              type\n            }\n          }\n          hash\n          status\n          timestamp\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                }\n                symbol\n                type\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetMayachainStatus {\n  mayachain {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery GetMayachainFee {\n  mayachain {\n    fee {\n      outboundTransactionFee\n      nativeTransactionFee\n      tnsRegisterFee\n      tnsFeeOnSale\n      tnsFeePerBlock\n    }\n  }\n}'
): typeof documents['query GetMayachainBalances($address: String!) {\n  mayachain {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        name\n        image\n        price {\n          amount\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetMayachainTransactions($address: String!, $first: Int!, $after: String) {\n  mayachain {\n    transactions(address: $address, first: $first, after: $after) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          fee {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              id\n              decimals\n              image\n              name\n              symbol\n              price {\n                amount\n              }\n              type\n            }\n          }\n          hash\n          status\n          timestamp\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                }\n                symbol\n                type\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetMayachainStatus {\n  mayachain {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery GetMayachainFee {\n  mayachain {\n    fee {\n      outboundTransactionFee\n      nativeTransactionFee\n      tnsRegisterFee\n      tnsFeeOnSale\n      tnsFeePerBlock\n    }\n  }\n}'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'query GetThorchainBalances($address: String!) {\n  thorchain {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        name\n        image\n        price {\n          amount\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetThorchainTransactions($address: String!, $first: Int!, $after: String) {\n  thorchain {\n    transactions(address: $address, first: $first, after: $after) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          fee {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              id\n              decimals\n              image\n              name\n              symbol\n              price {\n                amount\n              }\n              type\n            }\n          }\n          hash\n          status\n          timestamp\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                }\n                symbol\n                type\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetThorchainStatus {\n  thorchain {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery GetThorchainFee {\n  thorchain {\n    fee {\n      outboundTransactionFee\n      nativeTransactionFee\n      tnsRegisterFee\n      tnsFeeOnSale\n      tnsFeePerBlock\n    }\n  }\n}'
): typeof documents['query GetThorchainBalances($address: String!) {\n  thorchain {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        name\n        image\n        price {\n          amount\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetThorchainTransactions($address: String!, $first: Int!, $after: String) {\n  thorchain {\n    transactions(address: $address, first: $first, after: $after) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          fee {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              id\n              decimals\n              image\n              name\n              symbol\n              price {\n                amount\n              }\n              type\n            }\n          }\n          hash\n          status\n          timestamp\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                }\n                symbol\n                type\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetThorchainStatus {\n  thorchain {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery GetThorchainFee {\n  thorchain {\n    fee {\n      outboundTransactionFee\n      nativeTransactionFee\n      tnsRegisterFee\n      tnsFeeOnSale\n      tnsFeePerBlock\n    }\n  }\n}'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'query GetTronBalance($address: String!) {\n  tron {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          scalingFactor\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n        scalingFactor\n      }\n    }\n  }\n}\n\nquery GetTronTransactions($address: String!, $first: Int) {\n  tron {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          toAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}'
): typeof documents['query GetTronBalance($address: String!) {\n  tron {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          scalingFactor\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n        scalingFactor\n      }\n    }\n  }\n}\n\nquery GetTronTransactions($address: String!, $first: Int) {\n  tron {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          toAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'query GetCryptoAssets($input: [CryptoAssetArgs!]!) {\n  assets {\n    cryptoAssets(input: $input) {\n      chain\n      contract\n      id\n      name\n      symbol\n      image\n      decimals\n      price {\n        amount\n        scalingFactor\n      }\n    }\n  }\n}'
): typeof documents['query GetCryptoAssets($input: [CryptoAssetArgs!]!) {\n  assets {\n    cryptoAssets(input: $input) {\n      chain\n      contract\n      id\n      name\n      symbol\n      image\n      decimals\n      price {\n        amount\n        scalingFactor\n      }\n    }\n  }\n}'];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> =
  TDocumentNode extends DocumentNode<infer TType, any> ? TType : never;
