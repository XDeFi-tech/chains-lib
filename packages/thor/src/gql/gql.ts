/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
  'query GetMayachainBalances($address: String!) {\n  mayachain {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        name\n        image\n        price {\n          amount\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetMayachainTransactions($address: String!, $first: Int!, $after: String) {\n  mayachain {\n    transactions(address: $address, first: $first, after: $after) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          fee {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              id\n              decimals\n              image\n              name\n              symbol\n              price {\n                amount\n              }\n              type\n            }\n          }\n          hash\n          status\n          timestamp\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                }\n                symbol\n                type\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetMayachainStatus {\n  mayachain {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery GetMayachainFee {\n  mayachain {\n    fee {\n      outboundTransactionFee\n      nativeTransactionFee\n      tnsRegisterFee\n      tnsFeeOnSale\n      tnsFeePerBlock\n    }\n  }\n}':
    types.GetMayachainBalancesDocument,
  'query GetThorchainBalances($address: String!) {\n  thorchain {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        name\n        image\n        price {\n          amount\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetThorchainTransactions($address: String!, $first: Int!, $after: String) {\n  thorchain {\n    transactions(address: $address, first: $first, after: $after) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          fee {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              id\n              decimals\n              image\n              name\n              symbol\n              price {\n                amount\n              }\n              type\n            }\n          }\n          hash\n          status\n          timestamp\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                }\n                symbol\n                type\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetThorchainStatus {\n  thorchain {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery GetThorchainFee {\n  thorchain {\n    fee {\n      outboundTransactionFee\n      nativeTransactionFee\n      tnsRegisterFee\n      tnsFeeOnSale\n      tnsFeePerBlock\n    }\n  }\n}':
    types.GetThorchainBalancesDocument,
  'query GetCryptoAssets($input: [CryptoAssetArgs!]!) {\n  assets {\n    cryptoAssets(input: $input) {\n      chain\n      contract\n      id\n      name\n      symbol\n      image\n      decimals\n      price {\n        amount\n        scalingFactor\n      }\n    }\n  }\n}':
    types.GetCryptoAssetsDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'query GetMayachainBalances($address: String!) {\n  mayachain {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        name\n        image\n        price {\n          amount\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetMayachainTransactions($address: String!, $first: Int!, $after: String) {\n  mayachain {\n    transactions(address: $address, first: $first, after: $after) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          fee {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              id\n              decimals\n              image\n              name\n              symbol\n              price {\n                amount\n              }\n              type\n            }\n          }\n          hash\n          status\n          timestamp\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                }\n                symbol\n                type\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetMayachainStatus {\n  mayachain {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery GetMayachainFee {\n  mayachain {\n    fee {\n      outboundTransactionFee\n      nativeTransactionFee\n      tnsRegisterFee\n      tnsFeeOnSale\n      tnsFeePerBlock\n    }\n  }\n}'
): typeof documents['query GetMayachainBalances($address: String!) {\n  mayachain {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        name\n        image\n        price {\n          amount\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetMayachainTransactions($address: String!, $first: Int!, $after: String) {\n  mayachain {\n    transactions(address: $address, first: $first, after: $after) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          fee {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              id\n              decimals\n              image\n              name\n              symbol\n              price {\n                amount\n              }\n              type\n            }\n          }\n          hash\n          status\n          timestamp\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                }\n                symbol\n                type\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetMayachainStatus {\n  mayachain {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery GetMayachainFee {\n  mayachain {\n    fee {\n      outboundTransactionFee\n      nativeTransactionFee\n      tnsRegisterFee\n      tnsFeeOnSale\n      tnsFeePerBlock\n    }\n  }\n}'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'query GetThorchainBalances($address: String!) {\n  thorchain {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        name\n        image\n        price {\n          amount\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetThorchainTransactions($address: String!, $first: Int!, $after: String) {\n  thorchain {\n    transactions(address: $address, first: $first, after: $after) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          fee {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              id\n              decimals\n              image\n              name\n              symbol\n              price {\n                amount\n              }\n              type\n            }\n          }\n          hash\n          status\n          timestamp\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                }\n                symbol\n                type\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetThorchainStatus {\n  thorchain {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery GetThorchainFee {\n  thorchain {\n    fee {\n      outboundTransactionFee\n      nativeTransactionFee\n      tnsRegisterFee\n      tnsFeeOnSale\n      tnsFeePerBlock\n    }\n  }\n}'
): typeof documents['query GetThorchainBalances($address: String!) {\n  thorchain {\n    balances(address: $address) {\n      address\n      amount {\n        value\n      }\n      asset {\n        chain\n        contract\n        decimals\n        id\n        name\n        image\n        price {\n          amount\n        }\n        symbol\n      }\n    }\n  }\n}\n\nquery GetThorchainTransactions($address: String!, $first: Int!, $after: String) {\n  thorchain {\n    transactions(address: $address, first: $first, after: $after) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          fee {\n            amount {\n              value\n            }\n            asset {\n              chain\n              contract\n              id\n              decimals\n              image\n              name\n              symbol\n              price {\n                amount\n              }\n              type\n            }\n          }\n          hash\n          status\n          timestamp\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                }\n                symbol\n                type\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetThorchainStatus {\n  thorchain {\n    status {\n      lastBlock\n    }\n  }\n}\n\nquery GetThorchainFee {\n  thorchain {\n    fee {\n      outboundTransactionFee\n      nativeTransactionFee\n      tnsRegisterFee\n      tnsFeeOnSale\n      tnsFeePerBlock\n    }\n  }\n}'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'query GetCryptoAssets($input: [CryptoAssetArgs!]!) {\n  assets {\n    cryptoAssets(input: $input) {\n      chain\n      contract\n      id\n      name\n      symbol\n      image\n      decimals\n      price {\n        amount\n        scalingFactor\n      }\n    }\n  }\n}'
): typeof documents['query GetCryptoAssets($input: [CryptoAssetArgs!]!) {\n  assets {\n    cryptoAssets(input: $input) {\n      chain\n      contract\n      id\n      name\n      symbol\n      image\n      decimals\n      price {\n        amount\n        scalingFactor\n      }\n    }\n  }\n}'];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> =
  TDocumentNode extends DocumentNode<infer TType, any> ? TType : never;
