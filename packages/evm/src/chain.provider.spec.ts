import { providers } from 'ethers';
import { GasFeeSpeed, MsgEncoding } from '@xdefi-tech/chains-core';

import { EvmProvider } from './chain.provider';
import { IndexerDataSource } from './datasource';
import { EVM_MANIFESTS } from './manifests';
import { ChainMsg } from './msg';

describe('chain.provider gas fee', () => {
  let provider: EvmProvider;
  let originalGetFeeData: () => Promise<providers.FeeData>;

  beforeEach(() => {
    originalGetFeeData = providers.Provider.prototype.getFeeData;
    provider = new EvmProvider(new IndexerDataSource(EVM_MANIFESTS.ethereum));
  });

  afterEach(() => {
    providers.Provider.prototype.getFeeData = originalGetFeeData;
  });

  it('Should call to RPC to get fee', async () => {
    const msg = new ChainMsg(
      {
        amount: '0',
        chainId: '0x1',
        nonce: undefined as unknown as number,
        decimals: 18,
        from: '0x8d8dC7e30407778532052330dBAC3D3186411e0D',
        to: '0xd2667072a2a30e8C21fa276B474FD047ab5FF0F7',
        data: '0x415565b0000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000006810e776880c02933d47db1b9fc05908e5386b9600000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000000000000000000000000000002bf4bfe909ecde00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000046000000000000000000000000000000000000000000000000000000000000005600000000000000000000000000000000000000000000000000000000000000660000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000040000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee00000000000000000000000000000000000000000000000000038d7ea4c680000000000000000000000000000000000000000000000000000000000000000021000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000006810e776880c02933d47db1b9fc05908e5386b96000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000280000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000003556e697377617000000000000000000000000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000000000000000000000000000002c49c874265f8000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000020000000000000000000000000c0a47dfe034b400b47bdad5fecda2621de6c4d95000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001b000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000006810e776880c02933d47db1b9fc05908e5386b9600000000000000000000000000000000000000000000000000004406d5b05bb5000000000000000000000000d2667072a2a30e8c21fa276b474fd047ab5ff0f7000000000000000000000000000000000000000000000000000000000000001b000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000006810e776880c02933d47db1b9fc05908e5386b9600000000000000000000000000000000000000000000000000001101b56c16ed000000000000000000000000ad01c20d5886137e056775af56915de824c8fce5000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd000000000000000000000000f1da0931c044964ca4cc6fd669ed7019b63e66ce0000000000000000000000000000000000000000b2376064f78f1002283871a6',
      },
      provider,
      MsgEncoding.object
    );
    const fees = await provider.estimateFee([msg], GasFeeSpeed.medium);
    console.log('fees', fees);
  });
});
