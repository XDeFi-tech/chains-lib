/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
  'query GetArbitrumBalance($address: String!) {\n  arbitrum {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n      }\n    }\n  }\n}\n\nquery ArbitrumDefaultGasFees {\n  arbitrum {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetArbitrumTransactions($address: String!, $first: Int) {\n  arbitrum {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetArbitrumStatus {\n  arbitrum {\n    status {\n      lastBlock\n    }\n  }\n}':
    types.GetArbitrumBalanceDocument,
  'query GetAuroraBalance($address: String!) {\n  aurora {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n      }\n    }\n  }\n}\n\nquery AuroraDefaultGasFees {\n  aurora {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetAuroraTransactions($address: String!, $first: Int) {\n  aurora {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetAuroraStatus {\n  aurora {\n    status {\n      lastBlock\n    }\n  }\n}':
    types.GetAuroraBalanceDocument,
  'query GetAvalancheBalance($address: String!) {\n  avalanche {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n      }\n    }\n  }\n}\n\nquery AvalancheEIP1559GasFees {\n  avalanche {\n    fee {\n      high {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      low {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      medium {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n    }\n  }\n}\n\nquery GetAvalancheTransactions($address: String!, $first: Int) {\n  avalanche {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetAvalancheStatus {\n  avalanche {\n    status {\n      lastBlock\n    }\n  }\n}':
    types.GetAvalancheBalanceDocument,
  'query GetCantoEVMBalance($address: String!) {\n  cantoEVM {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n      }\n    }\n  }\n}\n\nquery CantoEVMEIP1559GasFees {\n  cantoEVM {\n    fee {\n      high {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      low {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      medium {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n    }\n  }\n}\n\nquery GetCantoEVMTransactions($address: String!, $first: Int) {\n  cantoEVM {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetCantoEVMStatus {\n  cantoEVM {\n    status {\n      lastBlock\n    }\n  }\n}':
    types.GetCantoEvmBalanceDocument,
  'query GetCronosEVMBalance($address: String!) {\n  cronosEVM {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n      }\n    }\n  }\n}\n\nquery CronosEVMEIP1559GasFees {\n  cronosEVM {\n    fee {\n      high {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      low {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      medium {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n    }\n  }\n}\n\nquery GetCronosEVMTransactions($address: String!, $first: Int) {\n  cronosEVM {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetCronosEVMStatus {\n  cronosEVM {\n    status {\n      lastBlock\n    }\n  }\n}':
    types.GetCronosEvmBalanceDocument,
  'query GetEthereumBalance($address: String!) {\n  ethereum {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n      }\n    }\n  }\n}\n\nquery EthereumEIP1559GasFees {\n  ethereum {\n    fee {\n      high {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      low {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      medium {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n    }\n  }\n}\n\nquery GetEthereumTransactions($address: String!, $first: Int) {\n  ethereum {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetEthereumStatus {\n  ethereum {\n    status {\n      lastBlock\n    }\n  }\n}':
    types.GetEthereumBalanceDocument,
  'query GetFantomBalance($address: String!) {\n  fantom {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n      }\n    }\n  }\n}\n\nquery FantomEIP1559GasFees {\n  fantom {\n    fee {\n      high {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      low {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      medium {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n    }\n  }\n}\n\nquery GetFantomTransactions($address: String!, $first: Int) {\n  fantom {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetFantomStatus {\n  fantom {\n    status {\n      lastBlock\n    }\n  }\n}':
    types.GetFantomBalanceDocument,
  'query GetOptimismBalance($address: String!) {\n  optimism {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n      }\n    }\n  }\n}\n\nquery OptimismEIP1559GasFees {\n  optimism {\n    fee {\n      high {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      low {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      medium {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n    }\n  }\n}\n\nquery GetOptimismTransactions($address: String!, $first: Int) {\n  optimism {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetOptimismStatus {\n  optimism {\n    status {\n      lastBlock\n    }\n  }\n}':
    types.GetOptimismBalanceDocument,
  'query GetPolygonBalance($address: String!) {\n  polygon {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n      }\n    }\n  }\n}\n\nquery PolygonEIP1559GasFees {\n  polygon {\n    fee {\n      high {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      low {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      medium {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n    }\n  }\n}\n\nquery GetPolygonTransactions($address: String!, $first: Int) {\n  polygon {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetPolygonStatus {\n  polygon {\n    status {\n      lastBlock\n    }\n  }\n}':
    types.GetPolygonBalanceDocument,
  'query GetSmartChainBalance($address: String!) {\n  binanceSmartChain {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n      }\n    }\n  }\n}\n\nquery SmartChainDefaultGasFees {\n  binanceSmartChain {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetSmartChainTransactions($address: String!, $first: Int) {\n  binanceSmartChain {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetSmartChainStatus {\n  binanceSmartChain {\n    status {\n      lastBlock\n    }\n  }\n}':
    types.GetSmartChainBalanceDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'query GetArbitrumBalance($address: String!) {\n  arbitrum {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n      }\n    }\n  }\n}\n\nquery ArbitrumDefaultGasFees {\n  arbitrum {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetArbitrumTransactions($address: String!, $first: Int) {\n  arbitrum {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetArbitrumStatus {\n  arbitrum {\n    status {\n      lastBlock\n    }\n  }\n}'
): typeof documents['query GetArbitrumBalance($address: String!) {\n  arbitrum {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n      }\n    }\n  }\n}\n\nquery ArbitrumDefaultGasFees {\n  arbitrum {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetArbitrumTransactions($address: String!, $first: Int) {\n  arbitrum {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetArbitrumStatus {\n  arbitrum {\n    status {\n      lastBlock\n    }\n  }\n}'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'query GetAuroraBalance($address: String!) {\n  aurora {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n      }\n    }\n  }\n}\n\nquery AuroraDefaultGasFees {\n  aurora {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetAuroraTransactions($address: String!, $first: Int) {\n  aurora {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetAuroraStatus {\n  aurora {\n    status {\n      lastBlock\n    }\n  }\n}'
): typeof documents['query GetAuroraBalance($address: String!) {\n  aurora {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n      }\n    }\n  }\n}\n\nquery AuroraDefaultGasFees {\n  aurora {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetAuroraTransactions($address: String!, $first: Int) {\n  aurora {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetAuroraStatus {\n  aurora {\n    status {\n      lastBlock\n    }\n  }\n}'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'query GetAvalancheBalance($address: String!) {\n  avalanche {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n      }\n    }\n  }\n}\n\nquery AvalancheEIP1559GasFees {\n  avalanche {\n    fee {\n      high {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      low {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      medium {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n    }\n  }\n}\n\nquery GetAvalancheTransactions($address: String!, $first: Int) {\n  avalanche {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetAvalancheStatus {\n  avalanche {\n    status {\n      lastBlock\n    }\n  }\n}'
): typeof documents['query GetAvalancheBalance($address: String!) {\n  avalanche {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n      }\n    }\n  }\n}\n\nquery AvalancheEIP1559GasFees {\n  avalanche {\n    fee {\n      high {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      low {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      medium {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n    }\n  }\n}\n\nquery GetAvalancheTransactions($address: String!, $first: Int) {\n  avalanche {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetAvalancheStatus {\n  avalanche {\n    status {\n      lastBlock\n    }\n  }\n}'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'query GetCantoEVMBalance($address: String!) {\n  cantoEVM {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n      }\n    }\n  }\n}\n\nquery CantoEVMEIP1559GasFees {\n  cantoEVM {\n    fee {\n      high {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      low {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      medium {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n    }\n  }\n}\n\nquery GetCantoEVMTransactions($address: String!, $first: Int) {\n  cantoEVM {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetCantoEVMStatus {\n  cantoEVM {\n    status {\n      lastBlock\n    }\n  }\n}'
): typeof documents['query GetCantoEVMBalance($address: String!) {\n  cantoEVM {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n      }\n    }\n  }\n}\n\nquery CantoEVMEIP1559GasFees {\n  cantoEVM {\n    fee {\n      high {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      low {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      medium {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n    }\n  }\n}\n\nquery GetCantoEVMTransactions($address: String!, $first: Int) {\n  cantoEVM {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetCantoEVMStatus {\n  cantoEVM {\n    status {\n      lastBlock\n    }\n  }\n}'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'query GetCronosEVMBalance($address: String!) {\n  cronosEVM {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n      }\n    }\n  }\n}\n\nquery CronosEVMEIP1559GasFees {\n  cronosEVM {\n    fee {\n      high {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      low {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      medium {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n    }\n  }\n}\n\nquery GetCronosEVMTransactions($address: String!, $first: Int) {\n  cronosEVM {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetCronosEVMStatus {\n  cronosEVM {\n    status {\n      lastBlock\n    }\n  }\n}'
): typeof documents['query GetCronosEVMBalance($address: String!) {\n  cronosEVM {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n      }\n    }\n  }\n}\n\nquery CronosEVMEIP1559GasFees {\n  cronosEVM {\n    fee {\n      high {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      low {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      medium {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n    }\n  }\n}\n\nquery GetCronosEVMTransactions($address: String!, $first: Int) {\n  cronosEVM {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetCronosEVMStatus {\n  cronosEVM {\n    status {\n      lastBlock\n    }\n  }\n}'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'query GetEthereumBalance($address: String!) {\n  ethereum {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n      }\n    }\n  }\n}\n\nquery EthereumEIP1559GasFees {\n  ethereum {\n    fee {\n      high {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      low {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      medium {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n    }\n  }\n}\n\nquery GetEthereumTransactions($address: String!, $first: Int) {\n  ethereum {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetEthereumStatus {\n  ethereum {\n    status {\n      lastBlock\n    }\n  }\n}'
): typeof documents['query GetEthereumBalance($address: String!) {\n  ethereum {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n      }\n    }\n  }\n}\n\nquery EthereumEIP1559GasFees {\n  ethereum {\n    fee {\n      high {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      low {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      medium {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n    }\n  }\n}\n\nquery GetEthereumTransactions($address: String!, $first: Int) {\n  ethereum {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetEthereumStatus {\n  ethereum {\n    status {\n      lastBlock\n    }\n  }\n}'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'query GetFantomBalance($address: String!) {\n  fantom {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n      }\n    }\n  }\n}\n\nquery FantomEIP1559GasFees {\n  fantom {\n    fee {\n      high {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      low {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      medium {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n    }\n  }\n}\n\nquery GetFantomTransactions($address: String!, $first: Int) {\n  fantom {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetFantomStatus {\n  fantom {\n    status {\n      lastBlock\n    }\n  }\n}'
): typeof documents['query GetFantomBalance($address: String!) {\n  fantom {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n      }\n    }\n  }\n}\n\nquery FantomEIP1559GasFees {\n  fantom {\n    fee {\n      high {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      low {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      medium {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n    }\n  }\n}\n\nquery GetFantomTransactions($address: String!, $first: Int) {\n  fantom {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetFantomStatus {\n  fantom {\n    status {\n      lastBlock\n    }\n  }\n}'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'query GetOptimismBalance($address: String!) {\n  optimism {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n      }\n    }\n  }\n}\n\nquery OptimismEIP1559GasFees {\n  optimism {\n    fee {\n      high {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      low {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      medium {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n    }\n  }\n}\n\nquery GetOptimismTransactions($address: String!, $first: Int) {\n  optimism {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetOptimismStatus {\n  optimism {\n    status {\n      lastBlock\n    }\n  }\n}'
): typeof documents['query GetOptimismBalance($address: String!) {\n  optimism {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n      }\n    }\n  }\n}\n\nquery OptimismEIP1559GasFees {\n  optimism {\n    fee {\n      high {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      low {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      medium {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n    }\n  }\n}\n\nquery GetOptimismTransactions($address: String!, $first: Int) {\n  optimism {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetOptimismStatus {\n  optimism {\n    status {\n      lastBlock\n    }\n  }\n}'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'query GetPolygonBalance($address: String!) {\n  polygon {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n      }\n    }\n  }\n}\n\nquery PolygonEIP1559GasFees {\n  polygon {\n    fee {\n      high {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      low {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      medium {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n    }\n  }\n}\n\nquery GetPolygonTransactions($address: String!, $first: Int) {\n  polygon {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetPolygonStatus {\n  polygon {\n    status {\n      lastBlock\n    }\n  }\n}'
): typeof documents['query GetPolygonBalance($address: String!) {\n  polygon {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n      }\n    }\n  }\n}\n\nquery PolygonEIP1559GasFees {\n  polygon {\n    fee {\n      high {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      low {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n      medium {\n        baseFeePerGas\n        maxFeePerGas\n        priorityFeePerGas\n      }\n    }\n  }\n}\n\nquery GetPolygonTransactions($address: String!, $first: Int) {\n  polygon {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetPolygonStatus {\n  polygon {\n    status {\n      lastBlock\n    }\n  }\n}'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
  source: 'query GetSmartChainBalance($address: String!) {\n  binanceSmartChain {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n      }\n    }\n  }\n}\n\nquery SmartChainDefaultGasFees {\n  binanceSmartChain {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetSmartChainTransactions($address: String!, $first: Int) {\n  binanceSmartChain {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetSmartChainStatus {\n  binanceSmartChain {\n    status {\n      lastBlock\n    }\n  }\n}'
): typeof documents['query GetSmartChainBalance($address: String!) {\n  binanceSmartChain {\n    balances(address: $address) {\n      address\n      asset {\n        symbol\n        contract\n        id\n        name\n        image\n        chain\n        decimals\n        price {\n          amount\n          dayPriceChange\n        }\n      }\n      amount {\n        value\n      }\n    }\n  }\n}\n\nquery SmartChainDefaultGasFees {\n  binanceSmartChain {\n    fee {\n      high\n      low\n      medium\n    }\n  }\n}\n\nquery GetSmartChainTransactions($address: String!, $first: Int) {\n  binanceSmartChain {\n    transactions(address: $address, first: $first) {\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          hash\n          blockIndex\n          blockNumber\n          status\n          value\n          timestamp\n          fromAddress\n          transfers {\n            amount {\n              value\n            }\n            asset {\n              ... on CryptoAsset {\n                chain\n                contract\n                decimals\n                id\n                image\n                name\n                price {\n                  amount\n                  scalingFactor\n                }\n                symbol\n              }\n            }\n            fromAddress\n            toAddress\n          }\n        }\n      }\n    }\n  }\n}\n\nquery GetSmartChainStatus {\n  binanceSmartChain {\n    status {\n      lastBlock\n    }\n  }\n}'];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> =
  TDocumentNode extends DocumentNode<infer TType, any> ? TType : never;
